# リバースプロキシのメンバー
<Proxy balancer://backend>
  BalancerMember http://backend-1:80
  BalancerMember http://backend-2:80
</Proxy>

# backend
#   ホスト側から、'balancer://backend'が動いているか確認するために定義したVirtualHost
#   OpenID Connect/OAuth2.0の設定には影響がない
<VirtualHost *:443>
  ServerName        backend.localtest.me
  ProxyPass         / balancer://backend/
  ProxyPassReverse  / balancer://backend/
</VirtualHost>

# OpenID Connect
#   OpenID ConnectのRelying Party(RP)の設定
#   ホスト側から、'https://oidc-proxy.localtest.me'でアクセスすると、認証・認可が行われる
<VirtualHost *:443>
  ServerName    oidc-proxy.localtest.me

  # 認可されたリクエストをプロキシする
  ProxyPass         / balancer://backend/
  ProxyPassReverse  / balancer://backend/

  # OpenID Connect config
  OIDCProviderMetadataURL http://keycloak.localtest.me:8080/auth/realms/sample-oidc/.well-known/openid-configuration
  OIDCClientID sample-app
  OIDCClientSecret faafd493-547e-4d8c-8a81-3c14ab55be66
  OIDCSSLValidateServer Off

  # OIDCRedirectURI is a vanity URL that must point to a path protected by this module but must NOT point to any content
  OIDCRedirectURI https://oidc-proxy.localtest.me/redirect_uri
  OIDCCryptoPassphrase password
  OIDCScope "openid email profile"

  <Location />
    # ログインユーザーは認可
    AuthType openid-connect
    Require valid-user
  </Location>

  <Location /admin/>
    # ログインユーザーのロール('realm_access.roles')に'admin'が含まれる場合は認可
    # IDトークンのペイロードのクレームで判定する
    AuthType openid-connect
    Require claim "realm_access.roles:admin"
  </Location>

  <Location /developer/>
    # ログインユーザーのロール('realm_access.roles')に'developer'が含まれる場合は認可
    # IDトークンのペイロードのクレームで判定する
    AuthType openid-connect
    Require claim "realm_access.roles:developer"
  </Location>

  <Location /support/>
    # ログインユーザーのロール('realm_access.roles')に'support'が含まれる場合は認可
    # IDトークンのペイロードのクレームで判定する
    AuthType openid-connect
    Require claim "realm_access.roles:support"
  </Location>

  <Location /operator/>
    # ログインユーザーのロール('realm_access.roles')に'admin' or 'operator'が含まれる場合は認可
    # IDトークンのペイロードのクレームで判定する
    AuthType openid-connect
    Require claim "realm_access.roles:admin"
    Require claim "realm_access.roles:operator"
  </Location>
</VirtualHost>

# OAuth 2.0
#   OAuth 2.0 Clientの設定
#   ホスト側から'https://oauth-proxy.localtest.me'でアクセスすると、認可が行われる
<VirtualHost *:443>
  ServerName    oauth-proxy.localtest.me

  # 認可されたリクエストをプロキシする
  ProxyPass         / balancer://backend/
  ProxyPassReverse  / balancer://backend/

  # OAuth 2.0 config
  # https://github.com/zmartzone/mod_auth_openidc/wiki/OAuth-2.0-Resource-Server#keycloak
  OIDCOAuthIntrospectionEndpoint https://keycloak-proxy:443/auth/realms/sample-oidc/protocol/openid-connect/token/introspect
  OIDCOAuthIntrospectionEndpointParams token_type_hint=access_token
  OIDCOAuthClientID sample-app
  OIDCOAuthClientSecret faafd493-547e-4d8c-8a81-3c14ab55be66
  #自己証明書を使っているのでOffにする
  OIDCOAuthSSLValidateServer Off

  <Location /api/>
    AuthType oauth20
    Require valid-user
  </Location>

  <Location /api/admin.json>
    AuthType oauth20
    Require claim "realm_access.roles:admin"
  </Location>

  <Location /api/developer.json>
    AuthType oauth20
    Require claim "realm_access.roles:developer"
  </Location>

  <Location /api/support.json>
    AuthType oauth20
    Require claim "realm_access.roles:support"
  </Location>
</VirtualHost>

# keycloak(internal)
<VirtualHost *:443>
  ServerName        keycloak-proxy
  ProxyPass         / http://keycloak:8080/
  ProxyPassReverse  / http://keycloak:8080/
</VirtualHost>

# keycloak(external)
<VirtualHost *:443>
  ServerName        keycloak-proxy.localtest.me
  ProxyPass         / http://keycloak:8080/
  ProxyPassReverse  / http://keycloak:8080/
</VirtualHost>
